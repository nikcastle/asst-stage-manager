var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React, { useCallback, useEffect, useRef, useState } from "react";
import PropTypes from "prop-types";
import { isEqual, isNil, isNull } from "lodash";
import * as Events from "./Events";
import usePrevious from "./usePrevValue";

if (!global._babelPolyfill) {
  require("babel-polyfill");
}

var DEFAULT_ANIMATION_TIMER = 1000;
var DEFAULT_ANIMATION = "ease-in-out";
var DEFAULT_CONTAINER_HEIGHT = "100vh";
var DEFAULT_CONTAINER_WIDTH = "100vw";
var DEFAULT_COMPONENT_INDEX = 0;
var DEFAULT_COMPONENTS_TO_RENDER_LENGTH = 0;

var DEFAULT_ANIMATION_TIMER_BUFFER = 200;
var KEY_UP = 38;
var KEY_DOWN = 40;
var DISABLED_CLASS_NAME = "rps-scroll--disabled";

var previousTouchMove = null;
var isScrolling = false;
var isMounted = false;
var isBodyScrollEnabled = true;
var isTransitionAfterComponentsToRenderChanged = false;
var containers = [];

var ReactPageScroller = function ReactPageScroller(_ref) {
  var animationTimer = _ref.animationTimer,
      animationTimerBuffer = _ref.animationTimerBuffer,
      blockScrollDown = _ref.blockScrollDown,
      blockScrollUp = _ref.blockScrollUp,
      children = _ref.children,
      containerHeight = _ref.containerHeight,
      containerWidth = _ref.containerWidth,
      customPageNumber = _ref.customPageNumber,
      handleScrollUnavailable = _ref.handleScrollUnavailable,
      pageOnChange = _ref.pageOnChange,
      renderAllPagesOnFirstRender = _ref.renderAllPagesOnFirstRender,
      transitionTimingFunction = _ref.transitionTimingFunction;

  var _useState = useState(DEFAULT_COMPONENT_INDEX),
      componentIndex = _useState[0],
      setComponentIndex = _useState[1];

  var _useState2 = useState(DEFAULT_COMPONENTS_TO_RENDER_LENGTH),
      componentsToRenderLength = _useState2[0],
      setComponentsToRenderLength = _useState2[1];

  var prevComponentIndex = usePrevious(componentIndex);
  var pageContainer = useRef(null);

  var addNextComponent = useCallback(function (componentsToRenderOnMountLength) {
    var tempComponentsToRenderLength = 0;

    if (!isNil(componentsToRenderOnMountLength)) {
      tempComponentsToRenderLength = componentsToRenderOnMountLength;
    }

    tempComponentsToRenderLength = Math.max(tempComponentsToRenderLength, componentsToRenderLength);

    if (tempComponentsToRenderLength <= componentIndex + 1) {
      if (!isNil(children[componentIndex + 1])) {
        tempComponentsToRenderLength++;
      }
    }

    setComponentsToRenderLength(tempComponentsToRenderLength);
  }, [children, componentIndex, componentsToRenderLength]);

  var checkRenderOnMount = useCallback(function () {
    if (renderAllPagesOnFirstRender) {
      setComponentsToRenderLength(React.Children.count(children));
    } else if (!isNil(children[DEFAULT_COMPONENT_INDEX + 1])) {
      addNextComponent(DEFAULT_COMPONENTS_TO_RENDER_LENGTH + 1);
    }
  }, [addNextComponent, children, renderAllPagesOnFirstRender]);

  var disableScroll = useCallback(function () {
    if (isBodyScrollEnabled) {
      isBodyScrollEnabled = false;
      window.scrollTo({
        left: 0,
        top: 0,
        behavior: "smooth"
      });
      document.body.classList.add(DISABLED_CLASS_NAME);
      document.documentElement.classList.add(DISABLED_CLASS_NAME);
    }
  }, []);

  var enableDocumentScroll = useCallback(function () {
    if (!isBodyScrollEnabled) {
      isBodyScrollEnabled = true;
      document.body.classList.remove(DISABLED_CLASS_NAME);
      document.documentElement.classList.remove(DISABLED_CLASS_NAME);
    }
  }, []);

  var setRenderComponents = useCallback(function () {
    var newComponentsToRender = [];

    var i = 0;

    while (i < componentsToRenderLength && !isNil(children[i])) {
      containers[i] = true;
      newComponentsToRender.push(React.createElement(
        "div",
        { key: i, style: { height: "100%", width: "100%" } },
        React.cloneElement(children[i], _extends({}, children[i].props))
      ));
      i++;
    }

    return newComponentsToRender;
  }, [children, componentsToRenderLength]);

  var scrollWindowDown = useCallback(function () {
    if (!isScrolling && !blockScrollDown) {
      if (!isNil(containers[componentIndex + 1])) {
        disableScroll();
        isScrolling = true;
        pageContainer.current.style.transform = "translate3d(0, " + (componentIndex + 1) * -100 + "%, 0)";

        setTimeout(function () {
          if (isMounted) {
            setComponentIndex(function (prevState) {
              return prevState + 1;
            });
          }
        }, animationTimer + animationTimerBuffer);
      } else {
        enableDocumentScroll();
        if (handleScrollUnavailable) {
          handleScrollUnavailable();
        }
      }
    }
  }, [animationTimer, animationTimerBuffer, blockScrollDown, componentIndex, disableScroll, enableDocumentScroll, handleScrollUnavailable]);

  var scrollWindowUp = useCallback(function () {
    if (!isScrolling && !blockScrollUp) {
      if (!isNil(containers[componentIndex - 1])) {
        disableScroll();
        isScrolling = true;
        pageContainer.current.style.transform = "translate3d(0, " + (componentIndex - 1) * -100 + "%, 0)";

        setTimeout(function () {
          if (isMounted) {
            setComponentIndex(function (prevState) {
              return prevState - 1;
            });
          }
        }, animationTimer + animationTimerBuffer);
      } else {
        enableDocumentScroll();
        if (handleScrollUnavailable) {
          handleScrollUnavailable();
        }
      }
    }
  }, [animationTimer, animationTimerBuffer, blockScrollUp, componentIndex, disableScroll, enableDocumentScroll, handleScrollUnavailable]);

  var touchMove = useCallback(function (event) {
    if (!isNull(previousTouchMove)) {
      if (event.touches[0].clientY > previousTouchMove) {
        scrollWindowUp();
      } else {
        scrollWindowDown();
      }
    } else {
      previousTouchMove = event.touches[0].clientY;
    }
  }, [scrollWindowDown, scrollWindowUp]);

  var wheelScroll = useCallback(function (event) {
    if (event.deltaY < 0) {
      scrollWindowUp();
    } else {
      scrollWindowDown();
    }
  }, [scrollWindowDown, scrollWindowUp]);

  var keyPress = useCallback(function (event) {
    if (isEqual(event.keyCode, KEY_UP)) {
      scrollWindowUp();
    }
    if (isEqual(event.keyCode, KEY_DOWN)) {
      scrollWindowDown();
    }
  }, [scrollWindowDown, scrollWindowUp]);

  useEffect(function () {
    pageContainer.current.addEventListener(Events.TOUCHMOVE, touchMove);
    pageContainer.current.addEventListener(Events.KEYDOWN, keyPress);
    return function () {
      pageContainer.current.removeEventListener(Events.TOUCHMOVE, touchMove);
      pageContainer.current.removeEventListener(Events.KEYDOWN, keyPress);
    };
  }, [touchMove, keyPress]);

  useEffect(function () {
    isMounted = true;

    checkRenderOnMount();
    return function () {
      isMounted = false;
    };
  }, []);

  useEffect(function () {
    isScrolling = false;
    previousTouchMove = null;
    if (componentIndex > prevComponentIndex) {
      addNextComponent();
    }
  }, [addNextComponent, componentIndex, prevComponentIndex]);

  useEffect(function () {
    if (pageOnChange) {
      pageOnChange(componentIndex);
    }
  }, [pageOnChange, componentIndex]);

  useEffect(function () {
    if (!isNil(customPageNumber) && !isEqual(customPageNumber, componentIndex)) {
      var newComponentsToRenderLength = componentsToRenderLength;

      if (!isEqual(componentIndex, customPageNumber)) {
        if (!isNil(containers[customPageNumber]) && !isScrolling) {
          isScrolling = true;
          // eslint-disable-next-line max-len
          pageContainer.current.style.transform = "translate3d(0, " + customPageNumber * -100 + "%, 0)";

          if (isNil(containers[customPageNumber]) && !isNil(children[customPageNumber])) {
            newComponentsToRenderLength++;
          }

          setTimeout(function () {
            setComponentIndex(customPageNumber);
            setComponentsToRenderLength(newComponentsToRenderLength);
          }, animationTimer + animationTimerBuffer);
        } else if (!isScrolling && !isNil(children[customPageNumber])) {
          for (var i = componentsToRenderLength; i <= customPageNumber; i++) {
            newComponentsToRenderLength++;
          }

          if (!isNil(children[customPageNumber])) {
            newComponentsToRenderLength++;
          }

          isScrolling = true;
          isTransitionAfterComponentsToRenderChanged = true;
          setComponentsToRenderLength(newComponentsToRenderLength);
        }
      }
    }
  }, [customPageNumber]);

  useEffect(function () {
    if (isTransitionAfterComponentsToRenderChanged) {
      isTransitionAfterComponentsToRenderChanged = false;

      pageContainer.current.style.transform = "translate3d(0, " + customPageNumber * -100 + "%, 0)";

      setTimeout(function () {
        setComponentIndex(customPageNumber);
      }, animationTimer + animationTimerBuffer);
    }
  }, [animationTimer, animationTimerBuffer, componentsToRenderLength, customPageNumber]);

  return React.createElement(
    "div",
    {
      style: {
        height: containerHeight,
        width: containerWidth,
        overflow: "hidden"
      }
    },
    React.createElement(
      "div",
      {
        ref: pageContainer,
        onWheel: wheelScroll,
        style: {
          height: "100%",
          width: "100%",
          transition: "transform " + animationTimer + "ms " + transitionTimingFunction,
          outline: "none"
        },
        tabIndex: 0
      },
      setRenderComponents()
    )
  );
};

ReactPageScroller.propTypes = process.env.NODE_ENV !== "production" ? {
  animationTimer: PropTypes.number,
  animationTimerBuffer: PropTypes.number,
  blockScrollDown: PropTypes.bool,
  blockScrollUp: PropTypes.bool,
  children: PropTypes.any,
  containerHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  containerWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  customPageNumber: PropTypes.number,
  handleScrollUnavailable: PropTypes.func,
  pageOnChange: PropTypes.func,
  renderAllPagesOnFirstRender: PropTypes.bool,
  transitionTimingFunction: PropTypes.string
} : {};

ReactPageScroller.defaultProps = {
  animationTimer: DEFAULT_ANIMATION_TIMER,
  animationTimerBuffer: DEFAULT_ANIMATION_TIMER_BUFFER,
  transitionTimingFunction: DEFAULT_ANIMATION,
  containerHeight: DEFAULT_CONTAINER_HEIGHT,
  containerWidth: DEFAULT_CONTAINER_WIDTH,
  blockScrollUp: false,
  blockScrollDown: false
};

export default ReactPageScroller;