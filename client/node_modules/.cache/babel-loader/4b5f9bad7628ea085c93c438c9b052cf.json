{"ast":null,"code":"'use strict';\n\nvar anObject = require('./_an-object');\n\nvar toLength = require('./_to-length');\n\nvar advanceStringIndex = require('./_advance-string-index');\n\nvar regExpExec = require('./_regexp-exec-abstract'); // @@match logic\n\n\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [// `String.prototype.match` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.match\n  function match(regexp) {\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, // `RegExp.prototype[@@match]` method\n  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n  function (regexp) {\n    var res = maybeCallNative($match, regexp, this);\n    if (res.done) return res.value;\n    var rx = anObject(regexp);\n    var S = String(this);\n    if (!rx.global) return regExpExec(rx, S);\n    var fullUnicode = rx.unicode;\n    rx.lastIndex = 0;\n    var A = [];\n    var n = 0;\n    var result;\n\n    while ((result = regExpExec(rx, S)) !== null) {\n      var matchStr = String(result[0]);\n      A[n] = matchStr;\n      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      n++;\n    }\n\n    return n === 0 ? null : A;\n  }];\n});","map":{"version":3,"sources":["/Users/nikkicastle/Desktop/code/asst-stage-manager/client/node_modules/babel-polyfill/node_modules/core-js/modules/es6.regexp.match.js"],"names":["anObject","require","toLength","advanceStringIndex","regExpExec","defined","MATCH","$match","maybeCallNative","match","regexp","O","fn","undefined","call","RegExp","String","res","done","value","rx","S","global","fullUnicode","unicode","lastIndex","A","n","result","matchStr"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAIE,kBAAkB,GAAGF,OAAO,CAAC,yBAAD,CAAhC;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,yBAAD,CAAxB,C,CAEA;;;AACAA,OAAO,CAAC,eAAD,CAAP,CAAyB,OAAzB,EAAkC,CAAlC,EAAqC,UAAUI,OAAV,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,eAAlC,EAAmD;AACtF,SAAO,CACL;AACA;AACA,WAASC,KAAT,CAAeC,MAAf,EAAuB;AACrB,QAAIC,CAAC,GAAGN,OAAO,CAAC,IAAD,CAAf;AACA,QAAIO,EAAE,GAAGF,MAAM,IAAIG,SAAV,GAAsBA,SAAtB,GAAkCH,MAAM,CAACJ,KAAD,CAAjD;AACA,WAAOM,EAAE,KAAKC,SAAP,GAAmBD,EAAE,CAACE,IAAH,CAAQJ,MAAR,EAAgBC,CAAhB,CAAnB,GAAwC,IAAII,MAAJ,CAAWL,MAAX,EAAmBJ,KAAnB,EAA0BU,MAAM,CAACL,CAAD,CAAhC,CAA/C;AACD,GAPI,EAQL;AACA;AACA,YAAUD,MAAV,EAAkB;AAChB,QAAIO,GAAG,GAAGT,eAAe,CAACD,MAAD,EAASG,MAAT,EAAiB,IAAjB,CAAzB;AACA,QAAIO,GAAG,CAACC,IAAR,EAAc,OAAOD,GAAG,CAACE,KAAX;AACd,QAAIC,EAAE,GAAGpB,QAAQ,CAACU,MAAD,CAAjB;AACA,QAAIW,CAAC,GAAGL,MAAM,CAAC,IAAD,CAAd;AACA,QAAI,CAACI,EAAE,CAACE,MAAR,EAAgB,OAAOlB,UAAU,CAACgB,EAAD,EAAKC,CAAL,CAAjB;AAChB,QAAIE,WAAW,GAAGH,EAAE,CAACI,OAArB;AACAJ,IAAAA,EAAE,CAACK,SAAH,GAAe,CAAf;AACA,QAAIC,CAAC,GAAG,EAAR;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,MAAJ;;AACA,WAAO,CAACA,MAAM,GAAGxB,UAAU,CAACgB,EAAD,EAAKC,CAAL,CAApB,MAAiC,IAAxC,EAA8C;AAC5C,UAAIQ,QAAQ,GAAGb,MAAM,CAACY,MAAM,CAAC,CAAD,CAAP,CAArB;AACAF,MAAAA,CAAC,CAACC,CAAD,CAAD,GAAOE,QAAP;AACA,UAAIA,QAAQ,KAAK,EAAjB,EAAqBT,EAAE,CAACK,SAAH,GAAetB,kBAAkB,CAACkB,CAAD,EAAInB,QAAQ,CAACkB,EAAE,CAACK,SAAJ,CAAZ,EAA4BF,WAA5B,CAAjC;AACrBI,MAAAA,CAAC;AACF;;AACD,WAAOA,CAAC,KAAK,CAAN,GAAU,IAAV,GAAiBD,CAAxB;AACD,GA5BI,CAAP;AA8BD,CA/BD","sourcesContent":["'use strict';\n\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regExpExec(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n"]},"metadata":{},"sourceType":"script"}