{"ast":null,"code":"var _jsxFileName = \"/Users/nikkicastle/Desktop/code/asst-stage-manager/client/src/pages/User.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useAuth0, withAuthenticationRequired } from \"@auth0/auth0-react\";\nimport { NavLink as RouterNavLink, Link } from \"react-router-dom\";\nimport { Button, Card, Container, Col, Row } from \"reactstrap\";\nimport NavBar from \"../components/navbar\";\nimport AddProduction from \"../components/addProduction\";\nimport NoteCard from \"../components/NoteCard\"; // import Footer from \"../components/Footer\";\n// import SearchBar from \"../components/SearchBar\";\n\nimport styled from \"styled-components\";\nimport API from \"../utils/API\"; // import Grocerylist from \"../components/GroceryList\";\n// import Converter from \"../utils/Conversion\";\n// import CarIcon from \"../components/CarIcon\";\n//Styling\n\nconst grey = \"#f9f9f9\";\nconst white = \"ffffff\";\nconst Div = styled.div`\n  div {\n    text-align: center;\n    background-color: ${props => props.color === \"grey\" ? grey : white};\n    padding: 15px;\n    margin: 0 auto;\n  }\n  p {\n    width: 60%;\n    margin: 15px auto;\n    font-size: 20px;\n    font-family: \"Roboto\";\n  }\n  h2 {\n   margin: 10px auto;\n   font-family: \"Raleway\";\n   font-size: 52px;\n  }\n  .button {\n    background-color: #cb5744;\n    border: none;\n  \n  }\n  .button:hover {\n  background-color: #ec9a59;\n  }\n  .rounded-circle {\n    max-width: 200px;\n  }\n  h4{\n    color: rgb(18, 61, 61);\n  }\n  #equivalency{\n    color: rgb(18, 61, 61);\n  }\n  h5{\n    justify-content: center;\n  }\n  }\n`;\n\nconst User = () => {\n  //Variables and States\n  const {\n    user,\n    isAuthenticated\n  } = useAuth0();\n  const [notes, setNotes] = useState([]);\n  const currentUser = user.sub;\n  const [productions, setProductions] = useState([]); // => if user then populate else => create user\n  //   useEffect(() => {\n  //     API.getUser(currentUser)\n  //       .then(dbUser => {\n  //         if (!dbUser.data) {\n  //           console.log(\"user not found\")\n  //           API.createUser({\n  //             username: user.email,\n  //             id: user.sub,\n  //             groceries: []\n  //           })\n  //         } else {\n  //           console.log(\"yay user found\", dbUser)\n  //           API.populateList(dbUser.data.id)\n  //             .then(res => {\n  //               console.log(res)\n  //               setGroceryList(res.data.groceryList);\n  //               if (res.data.groceryList.length) {\n  //                 calculateGHG(res.data.groceryList);\n  //               }\n  //             })\n  //         }\n  //       })\n  //       .catch(err => console.log(err));\n  //   }, [])\n  //   const handleInputChange = event => {\n  //     setSearchTerm(event.target.value);\n  //   }\n  //   const handleFormSubmit = event => {\n  //     event.preventDefault();\n  //     // take input search term and set it to correct format to search, first letter uppercase and rest lowercase\n  //     let word = searchTerm;\n  //     word = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n  //     API.getFood(word)\n  //       .then((data) => setSearchResults(data.data))\n  //       .catch(err => console.log(err))\n  //     setSearchTerm(\"\");\n  //   }\n  //   const addToGroceryList = (event, id) => {\n  //     event.preventDefault();\n  //     // API call to Foods collection to grab food for User to add to list in User collection\n  //     API.addItem(id, currentUser)\n  //       .then(res => {\n  //         API.populateList(currentUser)\n  //           .then(res => {\n  //             console.log(res)\n  //             setGroceryList(res.data.groceryList);\n  //             calculateGHG(res.data.groceryList);\n  //           })\n  //       })\n  //       .catch(err => console.log(err))\n  //   }\n  //   const removeFromGroceryList = (event, id) => {\n  //     event.preventDefault();\n  //     // API call to Foods collection to find item by ID and remove from User's collection\n  //     API.removeItem(id, currentUser)\n  //       .then(res => {\n  //         API.populateList(currentUser)\n  //           .then(res => {\n  //             setGroceryList(res.data.groceryList)\n  //             calculateGHG(res.data.groceryList);\n  //           })\n  //           .catch(err => console.log(err))\n  //       })\n  //   }\n\n  useEffect(() => {\n    loadNotes();\n  }, []);\n\n  function loadNotes() {\n    // Add code here to get all Notes from the database and store them using setNotes\n    API.getNotes().then(res => setNotes(res.data)).catch(err => console.log(err));\n  }\n\n  return isAuthenticated && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Div, {\n    color: \"grey\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: user.picture,\n    alt: user.name,\n    className: \"rounded-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, \"Hello, \", user.given_name, \"!\"))), /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AddProduction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Div, {\n    color: \"grey\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 19\n    }\n  }, \"Your Rehearsal Notes\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, notes ? notes.map(note => /*#__PURE__*/React.createElement(Col, {\n    md: 3,\n    key: note.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(NoteCard, {\n    title: note.title,\n    text: note.text,\n    production: note.production,\n    id: note.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 20\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 22\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    to: \"/Notes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 15\n    }\n  }, \"Add a new note\")))));\n};\n\nexport default withAuthenticationRequired(User);","map":{"version":3,"sources":["/Users/nikkicastle/Desktop/code/asst-stage-manager/client/src/pages/User.js"],"names":["React","useState","useEffect","useAuth0","withAuthenticationRequired","NavLink","RouterNavLink","Link","Button","Card","Container","Col","Row","NavBar","AddProduction","NoteCard","styled","API","grey","white","Div","div","props","color","User","user","isAuthenticated","notes","setNotes","currentUser","sub","productions","setProductions","loadNotes","getNotes","then","res","data","catch","err","console","log","picture","name","given_name","map","note","id","title","text","production"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useAuth0, withAuthenticationRequired } from \"@auth0/auth0-react\";\nimport { NavLink as RouterNavLink, Link } from \"react-router-dom\";\nimport { Button, Card, Container, Col, Row, } from \"reactstrap\"\nimport NavBar from \"../components/navbar\";\nimport AddProduction from \"../components/addProduction\";\nimport NoteCard from \"../components/NoteCard\";\n// import Footer from \"../components/Footer\";\n// import SearchBar from \"../components/SearchBar\";\nimport styled from \"styled-components\";\nimport API from \"../utils/API\";\n// import Grocerylist from \"../components/GroceryList\";\n// import Converter from \"../utils/Conversion\";\n// import CarIcon from \"../components/CarIcon\";\n\n//Styling\nconst grey = \"#f9f9f9\";\nconst white = \"ffffff\";\n\nconst Div = styled.div`\n  div {\n    text-align: center;\n    background-color: ${props => props.color === \"grey\" ? grey : white};\n    padding: 15px;\n    margin: 0 auto;\n  }\n  p {\n    width: 60%;\n    margin: 15px auto;\n    font-size: 20px;\n    font-family: \"Roboto\";\n  }\n  h2 {\n   margin: 10px auto;\n   font-family: \"Raleway\";\n   font-size: 52px;\n  }\n  .button {\n    background-color: #cb5744;\n    border: none;\n  \n  }\n  .button:hover {\n  background-color: #ec9a59;\n  }\n  .rounded-circle {\n    max-width: 200px;\n  }\n  h4{\n    color: rgb(18, 61, 61);\n  }\n  #equivalency{\n    color: rgb(18, 61, 61);\n  }\n  h5{\n    justify-content: center;\n  }\n  }\n`\n\nconst User = () => {\n  \n  //Variables and States\n  const { user, isAuthenticated } = useAuth0();\n\n  const [notes, setNotes] = useState([]);\n\n  const currentUser = user.sub;\n\n  const [productions, setProductions] = useState([]);\n\n  // => if user then populate else => create user\n//   useEffect(() => {\n\n//     API.getUser(currentUser)\n//       .then(dbUser => {\n//         if (!dbUser.data) {\n//           console.log(\"user not found\")\n//           API.createUser({\n//             username: user.email,\n//             id: user.sub,\n//             groceries: []\n//           })\n//         } else {\n//           console.log(\"yay user found\", dbUser)\n//           API.populateList(dbUser.data.id)\n//             .then(res => {\n//               console.log(res)\n//               setGroceryList(res.data.groceryList);\n//               if (res.data.groceryList.length) {\n//                 calculateGHG(res.data.groceryList);\n//               }\n//             })\n//         }\n//       })\n//       .catch(err => console.log(err));\n//   }, [])\n\n//   const handleInputChange = event => {\n//     setSearchTerm(event.target.value);\n//   }\n\n//   const handleFormSubmit = event => {\n//     event.preventDefault();\n//     // take input search term and set it to correct format to search, first letter uppercase and rest lowercase\n//     let word = searchTerm;\n//     word = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n//     API.getFood(word)\n//       .then((data) => setSearchResults(data.data))\n//       .catch(err => console.log(err))\n\n//     setSearchTerm(\"\");\n//   }\n\n//   const addToGroceryList = (event, id) => {\n//     event.preventDefault();\n//     // API call to Foods collection to grab food for User to add to list in User collection\n//     API.addItem(id, currentUser)\n//       .then(res => {\n//         API.populateList(currentUser)\n//           .then(res => {\n//             console.log(res)\n//             setGroceryList(res.data.groceryList);\n//             calculateGHG(res.data.groceryList);\n//           })\n//       })\n//       .catch(err => console.log(err))\n//   }\n\n\n//   const removeFromGroceryList = (event, id) => {\n//     event.preventDefault();\n//     // API call to Foods collection to find item by ID and remove from User's collection\n//     API.removeItem(id, currentUser)\n//       .then(res => {\n//         API.populateList(currentUser)\n//           .then(res => {\n//             setGroceryList(res.data.groceryList)\n//             calculateGHG(res.data.groceryList);\n//           })\n//           .catch(err => console.log(err))\n//       })\n//   }\n\n  useEffect(() => {\n    loadNotes();\n  }, []);\n\n  function loadNotes() {\n    // Add code here to get all Notes from the database and store them using setNotes\n    API.getNotes()\n      .then(res => setNotes(res.data))\n      .catch(err => console.log(err));\n      \n  }\n\n  return (\n    isAuthenticated && (\n      <>\n        <NavBar />\n        <Container fluid={true} >\n          <Div color=\"grey\">\n            <div>\n              <img\n                src={user.picture}\n                alt={user.name}\n                className=\"rounded-circle\" />\n              <h1>Hello, {user.given_name}!</h1>\n            </div>\n          </Div>\n\n          <Div>\n            {/* If there are items in the grocery list, populate list. Otherwise subtitle telling User to search for an item */}\n            <div>\n              <AddProduction/> \n            </div>\n          </Div>\n\n          <Div color=\"grey\">\n            <div>\n              <Row>\n                  <Col>\n                  <p>Your Rehearsal Notes</p>\n                  </Col>\n              </Row>\n              {/* If there are search results, map through them to create a card for each item in the array. Otherwise note no items were found*/}\n              <Row>\n                {notes ? (notes.map(note => (\n                   <Col md={3} key={note.id}>\n                   <NoteCard\n                     title={note.title}\n                     text={note.text}\n                     production={note.production}\n                     id={note.id}\n                    />\n                    </Col>\n                ))): <div></div>}\n              </Row>\n\n              <Button to =\"/Notes\">Add a new note</Button>\n\n            </div>\n          </Div>\n\n          {/* <Footer /> */}\n        </Container>\n      </>\n    )\n  )\n}\n\nexport default withAuthenticationRequired(User);"]},"metadata":{},"sourceType":"module"}